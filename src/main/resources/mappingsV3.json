{
    "recipes": [
        {
            "name": "UseVarForListDecl",
            "description": "Convert local List<T> declarations to `var` when they have an initializer.",
            "rollbackOnError": false,
            "steps": [
                {
                    "match": {
                        "nodeType": "VariableDeclarationExpr",
                        "type": "java.util.List",
                        "requireInitializer": true,
                        "requireNoTypeArgs": true
                    },
                    "actions": [
                        {
                            "changeType": {
                                "newType": "var"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ReplaceDateWithLocalDateTime",
            "description": "Replace `Date` with `LocalDateTime` and `new Date()` with `LocalDateTime.now()`.",
            "rollbackOnError": true,
            "imports": {
                "add": [
                    "java.time.LocalDateTime"
                ],
                "remove": []
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "ObjectCreationExpr",
                        "fqn": "java.util.Date"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "LocalDateTime",
                                "method": "now"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "VariableDeclarationExpr",
                        "type": "java.util.Date"
                    },
                    "actions": [
                        {
                            "changeType": {
                                "newType": "java.time.LocalDateTime"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "Parameter",
                        "type": "java.util.Date"
                    },
                    "actions": [
                        {
                            "changeType": {
                                "newType": "java.time.LocalDateTime"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "methodName": "awaitUntil",
                        "argumentType": "java.time.LocalDateTime",
                        "expectedParamType": "java.util.Date"
                    },
                    "actions": [
                        {
                            "wrapArgument": {
                                "template": "Date.from($ARG$.atZone(ZoneId.systemDefault()).toInstant())",
                                "addImports": [
                                    "java.util.Date",
                                    "java.time.ZoneId"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseCopyOfForUnmodifiableList",
            "description": "Replace Collections.unmodifiableList(...) with List.copyOf(...)",
            "rollbackOnError": false,
            "imports": {
                "add": [
                    "java.util.List"
                ],
                "remove": [
                    "java.util.Collections"
                ]
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "methodName": "unmodifiableList",
                        "fqn": "java.util.Collections"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "List",
                                "method": "copyOf"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "fqnScope": "java.util.Collections",
                        "methodName": "unmodifiableList"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "List",
                                "method": "copyOf"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseListOfForAsList",
            "description": "Replace Arrays.asList(...) with List.of(...)",
            "rollbackOnError": false,
            "imports": {
                "add": [
                    "java.util.List"
                ],
                "remove": [
                    "java.util.Arrays",
                    "java.util.Arrays.asList"
                ]
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "methodName": "asList",
                        "fqn": "java.util.Arrays"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "List",
                                "method": "of"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseSwitchReturnExpression",
            "description": "Convert switch statements (with return or multi-stmt cases) into a single return switch-expression",
            "rollbackOnError": true,
            "steps": [
                {
                    "match": {
                        "nodeType": "SwitchStmt"
                    },
                    "actions": [
                        {
                            "switchToReturnExpression": {}
                        }
                    ]
                }
            ]
        }
    ]
}