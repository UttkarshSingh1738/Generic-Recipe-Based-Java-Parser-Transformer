{
    "recipes": [
        {
            "name": "UseVarForListDecl",
            "description": "Convert local List<T> declarations to `var` when they have an initializer.",
            "rollbackOnError": true,
            "steps": [
                {
                    "match": {
                        "nodeType": "VariableDeclarationExpr",
                        "type": "java.util.List",
                        "requireInitializer": true,
                        "requireNoTypeArgs": false
                    },
                    "actions": [
                        {
                            "changeType": {
                                "newType": "var"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ReplaceDateWithLocalDateTime",
            "description": "Replace `Date` with `LocalDateTime` and `new Date()` with `LocalDateTime.now()`.",
            "rollbackOnError": true,
            "imports": {
                "add": [
                    "java.time.LocalDateTime"
                ],
                "remove": []
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "ObjectCreationExpr",
                        "fqn": "java.util.Date"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "LocalDateTime",
                                "method": "now"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "VariableDeclarationExpr",
                        "type": "java.util.Date"
                    },
                    "actions": [
                        {
                            "changeType": {
                                "newType": "java.time.LocalDateTime"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "Parameter",
                        "type": "java.util.Date"
                    },
                    "actions": [
                        {
                            "changeType": {
                                "newType": "java.time.LocalDateTime"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "methodName": "awaitUntil",
                        "argumentType": "java.time.LocalDateTime",
                        "expectedParamType": "java.util.Date"
                    },
                    "actions": [
                        {
                            "wrapArgument": {
                                "template": "Date.from($ARG$.atZone(ZoneId.systemDefault()).toInstant())",
                                "addImports": [
                                    "java.util.Date",
                                    "java.time.ZoneId"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseCopyOfForUnmodifiableList",
            "description": "Replace Collections.unmodifiableList(...) with List.copyOf(...)",
            "rollbackOnError": false,
            "imports": {
                "add": [
                    "java.util.List"
                ],
                "remove": [
                    "java.util.Collections"
                ]
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "methodName": "unmodifiableList",
                        "fqn": "java.util.Collections"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "List",
                                "method": "copyOf"
                            }
                        }
                    ]
                },
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "fqnScope": "java.util.Collections",
                        "methodName": "unmodifiableList"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "List",
                                "method": "copyOf"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseListOfForAsList",
            "description": "Replace Arrays.asList(...) with List.of(...)",
            "rollbackOnError": false,
            "imports": {
                "add": [
                    "java.util.List"
                ],
                "remove": [
                    "java.util.Arrays",
                    "java.util.Arrays.asList"
                ]
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "methodName": "asList",
                        "fqn": "java.util.Arrays"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "List",
                                "method": "of"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseSwitchReturnExpression",
            "description": "Convert switch statements (with return or multi-stmt cases) into a single return switch-expression",
            "rollbackOnError": true,
            "steps": [
                {
                    "match": {
                        "nodeType": "SwitchStmt"
                    },
                    "actions": [
                        {
                            "switchToReturnExpression": {}
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseTextBlock",
            "description": "Collapse purely‚Äêliteral string concatenations with escaped newlines into a text block",
            "rollbackOnError": false,
            "steps": [
                {
                    "match": {
                        "nodeType": "BinaryExpr",
                        "operator": "+",
                        "literalOnly": true,
                        "literalPattern": "\\\\n"
                    },
                    "actions": [
                        {
                            "collapseLiteralConcat": {
                                "collapseStyle": "TEXT_BLOCK"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseEnhancedFor",
            "description": "Convert C-style index loops over arrays/lists into enhanced for loops",
            "rollbackOnError": false,
            "steps": [
                {
                    "match": {
                        "nodeType": "ForStmt",
                        "initVarPattern": "i",
                        "conditionPattern": "i < \\w+\\.(?:length|size\\(\\))",
                        "updatePattern": "(?:\\+\\+i|i\\+\\+|i\\s*\\+=\\s*1)",
                        "accessPattern": "\\w+(?:\\[i\\]|\\.get\\(i\\))"
                    },
                    "actions": [
                        {
                            "forToForEach": {}
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseRequireNonNullElse",
            "description": "Replace Optional.ofNullable(x).orElse(y) with Objects.requireNonNullElse(x,y)",
            "rollbackOnError": false,
            "steps": [
                {
                    "match": {
                        "nodeType": "MethodCallExpr",
                        "scopePattern": "Optional\\.ofNullable",
                        "methodName": "orElse"
                    },
                    "actions": [
                        {
                            "replaceWithMethodCall": {
                                "scope": "Objects",
                                "method": "requireNonNullElse",
                                "unwrapScopeArg": "true"
                            }
                        },
                        {
                            "addImport": {
                                "name": "java.util.Objects"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UseIntegerSumFor1Plus2",
            "description": "Replace the literal 1 + 2 with Integer.sum(1, 2)",
            "rollbackOnError": false,
            "imports": {
                "add": [
                    "java.lang.Integer"
                ]
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "BinaryExpr",
                        "operator": "+",
                        "typePattern": "1\\s*\\+\\s*2"
                    },
                    "actions": [
                        {
                            "replaceWithTemplate": {
                                "template": "Integer.sum(1, 2)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "RemoveDebugPrints",
            "description": "Delete any System.out.println(...) statements",
            "rollbackOnError": false,
            "steps": [
                {
                    "match": {
                        "nodeType": "ExpressionStmt",
                        "matchExpr": "System\\.out\\.println\\([^)]*\\)"
                    },
                    "actions": [
                        {
                            "removeNode": {}
                        }
                    ]
                }
            ]
        },
        {
            "name": "DeprecateUtils",
            "description": "Mark all public *Util classes as @Deprecated",
            "rollbackOnError": false,
            "imports": {
                "add": [
                    "java.lang.Deprecated"
                ]
            },
            "steps": [
                {
                    "match": {
                        "nodeType": "ClassOrInterfaceDeclaration",
                        "hasModifier": "public",
                        "namePattern": ".*Util$",
                        "forbidsImport": "java.lang.Deprecated"
                    },
                    "actions": [
                        {
                            "addAnnotation": {
                                "name": "Deprecated"
                            }
                        }
                    ]
                }
            ]
        }
    ]
}